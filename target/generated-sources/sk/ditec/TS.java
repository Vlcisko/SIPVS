package sk.ditec;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 3.3.4 2019-11-21T09:52:31.939+01:00
 * Generated source version: 3.3.4
 *
 */
@WebServiceClient(name = "TS", wsdlLocation = "file:/C:/Users/Hektor1154/XX/sipvs/sipvs-2019/src/main/resources/TS.wsdl", targetNamespace = "http://www.ditec.sk/")
public class TS extends Service {

	public final static URL WSDL_LOCATION;

	public final static QName SERVICE = new QName("http://www.ditec.sk/", "TS");
	public final static QName TSSoap = new QName("http://www.ditec.sk/", "TSSoap");
	public final static QName TSSoap12 = new QName("http://www.ditec.sk/", "TSSoap12");
	static {
		URL url = null;
		try {
			url = new URL("file:/C:/Users/Hektor1154/XX/sipvs/sipvs-2019/src/main/resources/TS.wsdl");
		} catch (MalformedURLException e) {
			java.util.logging.Logger.getLogger(TS.class.getName()).log(java.util.logging.Level.INFO,
					"Can not initialize the default wsdl from {0}",
					"file:/C:/Users/Hektor1154/XX/sipvs/sipvs-2019/src/main/resources/TS.wsdl");
		}
		WSDL_LOCATION = url;
	}

	public TS(URL wsdlLocation) {
		super(wsdlLocation, SERVICE);
	}

	public TS(URL wsdlLocation, QName serviceName) {
		super(wsdlLocation, serviceName);
	}

	public TS() {
		super(WSDL_LOCATION, SERVICE);
	}

	public TS(WebServiceFeature... features) {
		super(WSDL_LOCATION, SERVICE, features);
	}

	public TS(URL wsdlLocation, WebServiceFeature... features) {
		super(wsdlLocation, SERVICE, features);
	}

	public TS(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
		super(wsdlLocation, serviceName, features);
	}

	/**
	 *
	 * @return returns TSSoap
	 */
	@WebEndpoint(name = "TSSoap")
	public TSSoap getTSSoap() {
		return super.getPort(TSSoap, TSSoap.class);
	}

	/**
	 *
	 * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *                 on the proxy. Supported features not in the
	 *                 <code>features</code> parameter will have their default
	 *                 values.
	 * @return returns TSSoap
	 */
	@WebEndpoint(name = "TSSoap")
	public TSSoap getTSSoap(WebServiceFeature... features) {
		return super.getPort(TSSoap, TSSoap.class, features);
	}

	/**
	 *
	 * @return returns TSSoap
	 */
	@WebEndpoint(name = "TSSoap12")
	public TSSoap getTSSoap12() {
		return super.getPort(TSSoap12, TSSoap.class);
	}

	/**
	 *
	 * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *                 on the proxy. Supported features not in the
	 *                 <code>features</code> parameter will have their default
	 *                 values.
	 * @return returns TSSoap
	 */
	@WebEndpoint(name = "TSSoap12")
	public TSSoap getTSSoap12(WebServiceFeature... features) {
		return super.getPort(TSSoap12, TSSoap.class, features);
	}

}
